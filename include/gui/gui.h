/*****************************************************************//**
 * @file   gui.h
 * @brief  This file contains the definition of the gui
 *         class that makes up the front end of HexLoader.
 *         The user selects an executable, DLL files,
 *         whether to generate a 'loader' or installer,
 *         installer options, the temp run path or installation
 *         directory, and the export path of a new executable.
 *         A portion of this file is autogenerated by WinForms
 *         and cannot be modified.
 * 
 * 
 * @author Kevin Crepps
 * @date   August 2024
 *********************************************************************/

#pragma once

#include <iostream>
#include <string>
#include <vector>

#include "info.h"

/**
 * Selectable areas for buttons.
 */
enum AREA
{
	BUTTON_SELECT_BIN,
	BUTTON_SELECT_LIB,
	BUTTON_EXPORT,
	BUTTON_BUILD,
	BUTTON_EXIT
};

/**
 * Used when prompting user to confirm auto-
 * installing compiler/chocolatey
 */
enum PROMPT_INDEX
{
	INSTALL_COMPILER,
	INSTALL_CHOCO
};

/**
 * Simple 2D vector used with selectable areas.
 */
struct vec2
{
	int x, y;

	vec2(int a_x, int a_y) noexcept
		:x(a_x), y(a_y) {}
};

/**
 * Frames for header animation.
 */
const std::vector<std::string> headerFrames =
{
	"---           ---",
	"--_           _--",
	"-_             _-",
	"_               _",
	"                 ",
	"                 ",
	"                 ",
	"                 ",
	"                 ",
	"  _           _  ",
	" _-           -_ ",
	"_--           --_",
	"---           ---",
	"---           ---",
	"---           ---",
	"---           ---"
};

/**
 * Used when prompting user whether to autoinstall
 * GNU compiler/chocolatey.
 */
static const unsigned int NUM_PROMPTS{ 2 };
bool prompting[NUM_PROMPTS] = { false };

namespace HexLoader {

	using namespace System;
	using namespace System::ComponentModel;
	using namespace System::Collections;
	using namespace System::Windows::Forms;
	using namespace System::Data;
	using namespace System::Drawing;

	/// <summary>
	/// Summary for gui
	/// </summary>
	public ref class gui : public System::Windows::Forms::Form
	{
	private:
		Loader* loaderPtr;

		unsigned int outputDelay;

		bool inputEnabled,
			mouseDown,
			expandConsole,
			installingCompiler,
			installingChoco,
			compiling,
			complete;

		Point cursorDownPos,
			cursorDelta;

		const char *binPath,
				   *appName;
				   
		String^ exportPath;

		System::Collections::Generic::List<String^> libPaths;

		System::Windows::Forms::Button^ buttonPtr;

		/*
					Constants
		*/

		// Text animation-related
		const unsigned int NUM_BUTTONS{ 5 },
		NUM_HEADER_FRAMES{ 16 },
		HEADER_TICK_RATE{ 9 },

		// Mouse-selectable window regions
		TITLE_BAR_HEIGHT{ 30 },
		TITLE_BAR_WIDTH{ 751 },

		BSB_AREA_L{ 329 },	// BUTTON_SELECT_BIN left, right, top, bottom
		BSB_AREA_R{ 352 },
		BSB_AREA_T{ 121 },
		BSB_AREA_B{ 135 },

		BSL_AREA_L{ 333 },	// BUTTON_SELECT_LIB
		BSL_AREA_R{ 349 },
		BSL_AREA_T{ 172 },
		BSL_AREA_B{ 188 },

		BEX_AREA_L{ 735 },	// BUTTON_EXPORT
		BEX_AREA_R{ 758 },
		BEX_AREA_T{ 160 },
		BEX_AREA_B{ 174 },

		BB_AREA_L{ 657 },	// BUTTON_BUILD
		BB_AREA_R{ 733 },
		BB_AREA_T{ 270 },
		BB_AREA_B{ 294 },

		BE_AREA_L{ 752},	// BUTTON EXIT
		BE_AREA_R{ 792},
		BE_AREA_T{ 1 },
		BE_AREA_B{ 29 },

		// Label locations
		XPOS_OFFSET{ 400 },
		XPOS_CHECK_CLEANUP{ 538 },
		XPOS_CHECK_UNINSTALLER{ 554 },
		XPOS_PROMPTS{ 460 },
		XPOS_RESET_LINK_0{ 593 },
		XPOS_RESET_LINK_1{ 521 },

		YPOS_RESET_LINK_0{ 276 },
		YPOS_RESET_LINK_1{ 219 },

		// Colors
		COLOR_RESET_LINK_0{ 20 },
		COLOR_RESET_LINK_1{ 30 },

		// Defaults and commands
		CONSOLE_WIDTH{ 353 },
		CONSOLE_RESIZE_INCREMENT{ 25 };

		const float FONT_SIZE_SMALL{ 6.0f },
					FONT_SIZE_LARGE{ 8.25f };

		const char *DEFAULT_TEXT_RUN{ "C:\\temp" },
				   *DEFAULT_TEXT_INSTALL{ "C:\\" },
				   *CMD_INSTALL_COMPILER{ "C:\\ProgramData\\chocolatey\\bin\\choco.exe install mingw -y --force" },
				   *CMD_INSTALL_CHOCO{
										"C:\\Windows\\System32\\WindowsPowerShell\\v1.0\\powershell.exe "
										"-NoProfile -InputFormat None -ExecutionPolicy Bypass -Command \" "
										"[System.Net.ServicePointManager]::SecurityProtocol = 3072; iex "
										"((New-Object System.Net.WebClient).DownloadString"
										"(\'https://chocolatey.org/install.ps1\'))\" && SET \"PATH=%PATH%;"
										"%ALLUSERSPROFILE%\\chocolatey\\bin\""
									 };


	private: System::Windows::Forms::Label^ label2;
	private: System::Windows::Forms::Button^ button_build;
	private: System::Windows::Forms::Button^ button_sb;
	private: System::Windows::Forms::Button^ button_sl;
	private: System::Windows::Forms::LinkLabel^ link_more;
	private: System::Windows::Forms::CheckBox^ check_shortcut;

	private: System::Windows::Forms::Label^ label_prompts;
	private: System::Windows::Forms::CheckBox^ check_startup;
	private: System::Windows::Forms::LinkLabel^ link_reset;




	private: System::Windows::Forms::TextBox^ text_output;
	private: System::Windows::Forms::Timer^ timer_console;
	private: System::Windows::Forms::Label^ label_export;

	private: System::Windows::Forms::TextBox^ input_export;
	private: System::Windows::Forms::Button^ button_ex;
	private: System::Windows::Forms::Label^ label_success;
	private: System::Windows::Forms::LinkLabel^ link_open;
	private: System::Windows::Forms::Button^ patch_export;
	private: System::Windows::Forms::Button^ patch_build;
private: System::Windows::Forms::Label^ label_version;
private: System::Windows::Forms::Button^ button_exit;






	private: System::Windows::Forms::Label^ header_1;

	public:
		gui(Loader& obj)
			:outputDelay(DELAY_OUTPUT_LONG),
			binPath(""),
			appName(""),
			exportPath(""),
			inputEnabled(true),
			mouseDown (false),
			expandConsole(false),
			installingCompiler(false),
			installingChoco(false),
			compiling(false),
			complete(false)
		{
			loaderPtr = &obj;
			mouseDown = false;

			InitializeComponent();

			exportPath = gcnew String(getenv("USERPROFILE"));
			input_export->Text = exportPath;

			timer_anim->Start();

			button_build->FlatStyle = FlatStyle::Flat;
			button_sb->FlatStyle = FlatStyle::Flat;
			button_sl->FlatStyle = FlatStyle::Flat;
			button_ex->FlatStyle = FlatStyle::Flat;
			patch_export->FlatStyle = FlatStyle::Flat;
			patch_build->FlatStyle = FlatStyle::Flat;
			button_exit->FlatStyle = FlatStyle::Flat;
			//button_build->FlatAppearance->BorderSize = 0;
			button_sb->FlatAppearance->BorderSize = 0;
			button_sl->FlatAppearance->BorderSize = 0;
			button_ex->FlatAppearance->BorderSize = 0;
			patch_export->FlatAppearance->BorderSize = 0;
			patch_build->FlatAppearance->BorderSize = 0;
			button_exit->FlatAppearance->BorderSize = 0;
		}

	protected:
		/// <summary>
		/// Clean up any resources being used.
		/// </summary>
		~gui()
		{
			if (components)
			{
				delete components;
			}
		}
	private: System::Windows::Forms::RadioButton^ radio_loader;
	protected:
	private: System::Windows::Forms::RadioButton^ radio_installer;
	private: System::Windows::Forms::Label^ header_1_back;

	private: System::Windows::Forms::TextBox^ input_bin;
	private: System::Windows::Forms::TextBox^ input_lib;

	private: System::Windows::Forms::Label^ label_bin;
	private: System::Windows::Forms::Label^ label_libs;
	private: System::Windows::Forms::CheckBox^ check_cleanup;

	private: System::Windows::Forms::Label^ label_run;

	private: System::Windows::Forms::TextBox^ input_run;

	private: System::Windows::Forms::Timer^ timer_anim;

	private: System::ComponentModel::IContainer^ components;

	private:
		/// <summary>
		/// Required designer variable.
		/// </summary>


#pragma region Windows Form Designer generated code
		/// <summary>
		/// Required method for Designer support - do not modify
		/// the contents of this method with the code editor.
		/// </summary>
		void InitializeComponent(void)
		{
			this->components = (gcnew System::ComponentModel::Container());
			System::ComponentModel::ComponentResourceManager^ resources = (gcnew System::ComponentModel::ComponentResourceManager(gui::typeid));
			this->radio_loader = (gcnew System::Windows::Forms::RadioButton());
			this->radio_installer = (gcnew System::Windows::Forms::RadioButton());
			this->header_1_back = (gcnew System::Windows::Forms::Label());
			this->input_bin = (gcnew System::Windows::Forms::TextBox());
			this->input_lib = (gcnew System::Windows::Forms::TextBox());
			this->label_bin = (gcnew System::Windows::Forms::Label());
			this->label_libs = (gcnew System::Windows::Forms::Label());
			this->check_cleanup = (gcnew System::Windows::Forms::CheckBox());
			this->label_run = (gcnew System::Windows::Forms::Label());
			this->input_run = (gcnew System::Windows::Forms::TextBox());
			this->timer_anim = (gcnew System::Windows::Forms::Timer(this->components));
			this->header_1 = (gcnew System::Windows::Forms::Label());
			this->label2 = (gcnew System::Windows::Forms::Label());
			this->button_build = (gcnew System::Windows::Forms::Button());
			this->button_sb = (gcnew System::Windows::Forms::Button());
			this->button_sl = (gcnew System::Windows::Forms::Button());
			this->link_more = (gcnew System::Windows::Forms::LinkLabel());
			this->check_shortcut = (gcnew System::Windows::Forms::CheckBox());
			this->label_prompts = (gcnew System::Windows::Forms::Label());
			this->check_startup = (gcnew System::Windows::Forms::CheckBox());
			this->link_reset = (gcnew System::Windows::Forms::LinkLabel());
			this->text_output = (gcnew System::Windows::Forms::TextBox());
			this->timer_console = (gcnew System::Windows::Forms::Timer(this->components));
			this->label_export = (gcnew System::Windows::Forms::Label());
			this->input_export = (gcnew System::Windows::Forms::TextBox());
			this->button_ex = (gcnew System::Windows::Forms::Button());
			this->label_success = (gcnew System::Windows::Forms::Label());
			this->link_open = (gcnew System::Windows::Forms::LinkLabel());
			this->patch_export = (gcnew System::Windows::Forms::Button());
			this->patch_build = (gcnew System::Windows::Forms::Button());
			this->label_version = (gcnew System::Windows::Forms::Label());
			this->button_exit = (gcnew System::Windows::Forms::Button());
			this->SuspendLayout();
			// 
			// radio_loader
			// 
			this->radio_loader->AutoSize = true;
			this->radio_loader->BackColor = System::Drawing::Color::FromArgb(static_cast<System::Int32>(static_cast<System::Byte>(32)), static_cast<System::Int32>(static_cast<System::Byte>(32)),
				static_cast<System::Int32>(static_cast<System::Byte>(32)));
			this->radio_loader->Checked = true;
			this->radio_loader->Font = (gcnew System::Drawing::Font(L"Lucida Sans Unicode", 9.75F, System::Drawing::FontStyle::Regular, System::Drawing::GraphicsUnit::Point,
				static_cast<System::Byte>(0)));
			this->radio_loader->ForeColor = System::Drawing::SystemColors::ButtonFace;
			this->radio_loader->Location = System::Drawing::Point(503, 114);
			this->radio_loader->Name = L"radio_loader";
			this->radio_loader->Size = System::Drawing::Size(67, 20);
			this->radio_loader->TabIndex = 2;
			this->radio_loader->TabStop = true;
			this->radio_loader->Text = L"Loader";
			this->radio_loader->UseVisualStyleBackColor = false;
			this->radio_loader->CheckedChanged += gcnew System::EventHandler(this, &gui::radio_loader_CheckedChanged);
			// 
			// radio_installer
			// 
			this->radio_installer->AutoSize = true;
			this->radio_installer->BackColor = System::Drawing::Color::FromArgb(static_cast<System::Int32>(static_cast<System::Byte>(32)), static_cast<System::Int32>(static_cast<System::Byte>(32)),
				static_cast<System::Int32>(static_cast<System::Byte>(32)));
			this->radio_installer->Font = (gcnew System::Drawing::Font(L"Lucida Sans Unicode", 9.75F, System::Drawing::FontStyle::Regular, System::Drawing::GraphicsUnit::Point,
				static_cast<System::Byte>(0)));
			this->radio_installer->ForeColor = System::Drawing::SystemColors::ButtonFace;
			this->radio_installer->Location = System::Drawing::Point(608, 114);
			this->radio_installer->Name = L"radio_installer";
			this->radio_installer->Size = System::Drawing::Size(76, 20);
			this->radio_installer->TabIndex = 1;
			this->radio_installer->Text = L"Installer";
			this->radio_installer->UseVisualStyleBackColor = false;
			// 
			// header_1_back
			// 
			this->header_1_back->BackColor = System::Drawing::Color::FromArgb(static_cast<System::Int32>(static_cast<System::Byte>(33)), static_cast<System::Int32>(static_cast<System::Byte>(33)),
				static_cast<System::Int32>(static_cast<System::Byte>(33)));
			this->header_1_back->Font = (gcnew System::Drawing::Font(L"Lucida Console", 18, System::Drawing::FontStyle::Regular, System::Drawing::GraphicsUnit::Point,
				static_cast<System::Byte>(0)));
			this->header_1_back->ForeColor = System::Drawing::Color::FromArgb(static_cast<System::Int32>(static_cast<System::Byte>(85)), static_cast<System::Int32>(static_cast<System::Byte>(0)),
				static_cast<System::Int32>(static_cast<System::Byte>(0)));
			this->header_1_back->Location = System::Drawing::Point(208, 44);
			this->header_1_back->Name = L"header_1_back";
			this->header_1_back->Size = System::Drawing::Size(381, 34);
			this->header_1_back->TabIndex = 2;
			this->header_1_back->Text = L"--- HexLoader ---";
			this->header_1_back->TextAlign = System::Drawing::ContentAlignment::MiddleCenter;
			// 
			// input_bin
			// 
			this->input_bin->BackColor = System::Drawing::Color::FromArgb(static_cast<System::Int32>(static_cast<System::Byte>(45)), static_cast<System::Int32>(static_cast<System::Byte>(45)),
				static_cast<System::Int32>(static_cast<System::Byte>(45)));
			this->input_bin->BorderStyle = System::Windows::Forms::BorderStyle::None;
			this->input_bin->Font = (gcnew System::Drawing::Font(L"Consolas", 9.75F, System::Drawing::FontStyle::Regular, System::Drawing::GraphicsUnit::Point,
				static_cast<System::Byte>(0)));
			this->input_bin->ForeColor = System::Drawing::SystemColors::ButtonFace;
			this->input_bin->Location = System::Drawing::Point(123, 121);
			this->input_bin->Name = L"input_bin";
			this->input_bin->Size = System::Drawing::Size(196, 16);
			this->input_bin->TabIndex = 0;
			this->input_bin->TextChanged += gcnew System::EventHandler(this, &gui::input_bin_TextChanged);
			// 
			// input_lib
			// 
			this->input_lib->BackColor = System::Drawing::Color::FromArgb(static_cast<System::Int32>(static_cast<System::Byte>(40)), static_cast<System::Int32>(static_cast<System::Byte>(40)),
				static_cast<System::Int32>(static_cast<System::Byte>(40)));
			this->input_lib->BorderStyle = System::Windows::Forms::BorderStyle::None;
			this->input_lib->Font = (gcnew System::Drawing::Font(L"Consolas", 9.75F, System::Drawing::FontStyle::Regular, System::Drawing::GraphicsUnit::Point,
				static_cast<System::Byte>(0)));
			this->input_lib->ForeColor = System::Drawing::SystemColors::ButtonFace;
			this->input_lib->Location = System::Drawing::Point(124, 173);
			this->input_lib->Multiline = true;
			this->input_lib->Name = L"input_lib";
			this->input_lib->ReadOnly = true;
			this->input_lib->Size = System::Drawing::Size(196, 118);
			this->input_lib->TabIndex = 1;
			// 
			// label_bin
			// 
			this->label_bin->AutoSize = true;
			this->label_bin->Font = (gcnew System::Drawing::Font(L"Lucida Sans Unicode", 9, System::Drawing::FontStyle::Regular, System::Drawing::GraphicsUnit::Point,
				static_cast<System::Byte>(0)));
			this->label_bin->Location = System::Drawing::Point(36, 120);
			this->label_bin->Name = L"label_bin";
			this->label_bin->Size = System::Drawing::Size(70, 16);
			this->label_bin->TabIndex = 5;
			this->label_bin->Text = L"Executable";
			// 
			// label_libs
			// 
			this->label_libs->AutoSize = true;
			this->label_libs->Font = (gcnew System::Drawing::Font(L"Lucida Sans Unicode", 9, System::Drawing::FontStyle::Regular, System::Drawing::GraphicsUnit::Point,
				static_cast<System::Byte>(0)));
			this->label_libs->Location = System::Drawing::Point(36, 169);
			this->label_libs->Name = L"label_libs";
			this->label_libs->Size = System::Drawing::Size(76, 16);
			this->label_libs->TabIndex = 6;
			this->label_libs->Text = L"Library Files";
			// 
			// check_cleanup
			// 
			this->check_cleanup->AutoSize = true;
			this->check_cleanup->BackColor = System::Drawing::Color::FromArgb(static_cast<System::Int32>(static_cast<System::Byte>(30)), static_cast<System::Int32>(static_cast<System::Byte>(30)),
				static_cast<System::Int32>(static_cast<System::Byte>(30)));
			this->check_cleanup->Font = (gcnew System::Drawing::Font(L"Lucida Sans Unicode", 8.25F, System::Drawing::FontStyle::Regular, System::Drawing::GraphicsUnit::Point,
				static_cast<System::Byte>(0)));
			this->check_cleanup->Location = System::Drawing::Point(530, 230);
			this->check_cleanup->Name = L"check_cleanup";
			this->check_cleanup->Size = System::Drawing::Size(111, 19);
			this->check_cleanup->TabIndex = 4;
			this->check_cleanup->Text = L"Cleanup Thread";
			this->check_cleanup->UseVisualStyleBackColor = false;
			this->check_cleanup->CheckedChanged += gcnew System::EventHandler(this, &gui::check_cleanup_CheckedChanged);
			// 
			// label_run
			// 
			this->label_run->BackColor = System::Drawing::Color::FromArgb(static_cast<System::Int32>(static_cast<System::Byte>(35)), static_cast<System::Int32>(static_cast<System::Byte>(35)),
				static_cast<System::Int32>(static_cast<System::Byte>(35)));
			this->label_run->Font = (gcnew System::Drawing::Font(L"Lucida Sans Unicode", 9, System::Drawing::FontStyle::Regular, System::Drawing::GraphicsUnit::Point,
				static_cast<System::Byte>(0)));
			this->label_run->Location = System::Drawing::Point(418, 191);
			this->label_run->Name = L"label_run";
			this->label_run->Size = System::Drawing::Size(99, 16);
			this->label_run->TabIndex = 9;
			this->label_run->Text = L"Run Location";
			this->label_run->TextAlign = System::Drawing::ContentAlignment::MiddleRight;
			// 
			// input_run
			// 
			this->input_run->BackColor = System::Drawing::Color::FromArgb(static_cast<System::Int32>(static_cast<System::Byte>(45)), static_cast<System::Int32>(static_cast<System::Byte>(45)),
				static_cast<System::Int32>(static_cast<System::Byte>(45)));
			this->input_run->BorderStyle = System::Windows::Forms::BorderStyle::None;
			this->input_run->Font = (gcnew System::Drawing::Font(L"Consolas", 9.75F, System::Drawing::FontStyle::Regular, System::Drawing::GraphicsUnit::Point,
				static_cast<System::Byte>(0)));
			this->input_run->ForeColor = System::Drawing::SystemColors::ButtonFace;
			this->input_run->Location = System::Drawing::Point(529, 192);
			this->input_run->Name = L"input_run";
			this->input_run->Size = System::Drawing::Size(190, 16);
			this->input_run->TabIndex = 3;
			this->input_run->Text = L"C:\\temp";
			this->input_run->TextChanged += gcnew System::EventHandler(this, &gui::input_run_TextChanged);
			// 
			// timer_anim
			// 
			this->timer_anim->Interval = 1;
			this->timer_anim->Tick += gcnew System::EventHandler(this, &gui::timer_anim_Tick);
			// 
			// header_1
			// 
			this->header_1->BackColor = System::Drawing::Color::FromArgb(static_cast<System::Int32>(static_cast<System::Byte>(33)), static_cast<System::Int32>(static_cast<System::Byte>(33)),
				static_cast<System::Int32>(static_cast<System::Byte>(33)));
			this->header_1->Font = (gcnew System::Drawing::Font(L"Lucida Console", 18, System::Drawing::FontStyle::Regular, System::Drawing::GraphicsUnit::Point,
				static_cast<System::Byte>(0)));
			this->header_1->ForeColor = System::Drawing::Color::FromArgb(static_cast<System::Int32>(static_cast<System::Byte>(170)), static_cast<System::Int32>(static_cast<System::Byte>(0)),
				static_cast<System::Int32>(static_cast<System::Byte>(0)));
			this->header_1->Location = System::Drawing::Point(330, 44);
			this->header_1->Name = L"header_1";
			this->header_1->Size = System::Drawing::Size(139, 34);
			this->header_1->TabIndex = 10;
			this->header_1->Text = L"HexLoader";
			this->header_1->TextAlign = System::Drawing::ContentAlignment::MiddleCenter;
			// 
			// label2
			// 
			this->label2->BackColor = System::Drawing::Color::FromArgb(static_cast<System::Int32>(static_cast<System::Byte>(25)), static_cast<System::Int32>(static_cast<System::Byte>(25)),
				static_cast<System::Int32>(static_cast<System::Byte>(25)));
			this->label2->Font = (gcnew System::Drawing::Font(L"Trebuchet MS", 9, System::Drawing::FontStyle::Regular, System::Drawing::GraphicsUnit::Point,
				static_cast<System::Byte>(0)));
			this->label2->ForeColor = System::Drawing::SystemColors::ButtonFace;
			this->label2->Location = System::Drawing::Point(34, 7);
			this->label2->Name = L"label2";
			this->label2->Size = System::Drawing::Size(72, 19);
			this->label2->TabIndex = 11;
			this->label2->Text = L"HexLoader";
			// 
			// button_build
			// 
			this->button_build->BackgroundImage = (cli::safe_cast<System::Drawing::Image^>(resources->GetObject(L"button_build.BackgroundImage")));
			this->button_build->BackgroundImageLayout = System::Windows::Forms::ImageLayout::Stretch;
			this->button_build->Font = (gcnew System::Drawing::Font(L"Lucida Sans Unicode", 8.25F, System::Drawing::FontStyle::Regular, System::Drawing::GraphicsUnit::Point,
				static_cast<System::Byte>(0)));
			this->button_build->ForeColor = System::Drawing::Color::FromArgb(static_cast<System::Int32>(static_cast<System::Byte>(200)), static_cast<System::Int32>(static_cast<System::Byte>(0)),
				static_cast<System::Int32>(static_cast<System::Byte>(0)));
			this->button_build->Location = System::Drawing::Point(658, 271);
			this->button_build->Name = L"button_build";
			this->button_build->Size = System::Drawing::Size(75, 23);
			this->button_build->TabIndex = 12;
			this->button_build->Text = L"Build";
			this->button_build->UseVisualStyleBackColor = true;
			this->button_build->Visible = false;
			this->button_build->Click += gcnew System::EventHandler(this, &gui::button_build_Click);
			// 
			// button_sb
			// 
			this->button_sb->AutoSize = true;
			this->button_sb->BackgroundImage = (cli::safe_cast<System::Drawing::Image^>(resources->GetObject(L"button_sb.BackgroundImage")));
			this->button_sb->ForeColor = System::Drawing::Color::FromArgb(static_cast<System::Int32>(static_cast<System::Byte>(30)), static_cast<System::Int32>(static_cast<System::Byte>(30)),
				static_cast<System::Int32>(static_cast<System::Byte>(30)));
			this->button_sb->Location = System::Drawing::Point(329, 121);
			this->button_sb->Name = L"button_sb";
			this->button_sb->Size = System::Drawing::Size(24, 15);
			this->button_sb->TabIndex = 13;
			this->button_sb->UseVisualStyleBackColor = true;
			this->button_sb->Visible = false;
			this->button_sb->Click += gcnew System::EventHandler(this, &gui::button_sb_Click);
			// 
			// button_sl
			// 
			this->button_sl->BackgroundImage = (cli::safe_cast<System::Drawing::Image^>(resources->GetObject(L"button_sl.BackgroundImage")));
			this->button_sl->ForeColor = System::Drawing::Color::FromArgb(static_cast<System::Int32>(static_cast<System::Byte>(30)), static_cast<System::Int32>(static_cast<System::Byte>(30)),
				static_cast<System::Int32>(static_cast<System::Byte>(30)));
			this->button_sl->Location = System::Drawing::Point(335, 173);
			this->button_sl->Name = L"button_sl";
			this->button_sl->Size = System::Drawing::Size(12, 12);
			this->button_sl->TabIndex = 14;
			this->button_sl->UseVisualStyleBackColor = true;
			this->button_sl->Visible = false;
			this->button_sl->Click += gcnew System::EventHandler(this, &gui::button_sl_Click);
			// 
			// link_more
			// 
			this->link_more->AutoSize = true;
			this->link_more->ForeColor = System::Drawing::SystemColors::ButtonFace;
			this->link_more->LinkColor = System::Drawing::Color::FromArgb(static_cast<System::Int32>(static_cast<System::Byte>(210)), static_cast<System::Int32>(static_cast<System::Byte>(210)),
				static_cast<System::Int32>(static_cast<System::Byte>(210)));
			this->link_more->Location = System::Drawing::Point(713, 50);
			this->link_more->Name = L"link_more";
			this->link_more->Size = System::Drawing::Size(31, 13);
			this->link_more->TabIndex = 15;
			this->link_more->TabStop = true;
			this->link_more->Text = L"More";
			this->link_more->TextAlign = System::Drawing::ContentAlignment::MiddleCenter;
			this->link_more->VisitedLinkColor = System::Drawing::SystemColors::ButtonFace;
			this->link_more->LinkClicked += gcnew System::Windows::Forms::LinkLabelLinkClickedEventHandler(this, &gui::link_more_LinkClicked);
			// 
			// check_shortcut
			// 
			this->check_shortcut->AutoSize = true;
			this->check_shortcut->BackColor = System::Drawing::Color::FromArgb(static_cast<System::Int32>(static_cast<System::Byte>(25)), static_cast<System::Int32>(static_cast<System::Byte>(25)),
				static_cast<System::Int32>(static_cast<System::Byte>(25)));
			this->check_shortcut->Font = (gcnew System::Drawing::Font(L"Lucida Sans Unicode", 8.25F, System::Drawing::FontStyle::Regular, System::Drawing::GraphicsUnit::Point,
				static_cast<System::Byte>(0)));
			this->check_shortcut->Location = System::Drawing::Point(852, 254);
			this->check_shortcut->Name = L"check_shortcut";
			this->check_shortcut->Size = System::Drawing::Size(72, 19);
			this->check_shortcut->TabIndex = 16;
			this->check_shortcut->Text = L"Shortcut";
			this->check_shortcut->UseVisualStyleBackColor = false;
			this->check_shortcut->CheckedChanged += gcnew System::EventHandler(this, &gui::check_shortcut_CheckedChanged);
			// 
			// label_prompts
			// 
			this->label_prompts->BackColor = System::Drawing::Color::FromArgb(static_cast<System::Int32>(static_cast<System::Byte>(29)), static_cast<System::Int32>(static_cast<System::Byte>(29)),
				static_cast<System::Int32>(static_cast<System::Byte>(29)));
			this->label_prompts->Font = (gcnew System::Drawing::Font(L"Lucida Sans Unicode", 8.25F, System::Drawing::FontStyle::Regular, System::Drawing::GraphicsUnit::Point,
				static_cast<System::Byte>(0)));
			this->label_prompts->Location = System::Drawing::Point(852, 234);
			this->label_prompts->Name = L"label_prompts";
			this->label_prompts->Size = System::Drawing::Size(65, 15);
			this->label_prompts->TabIndex = 17;
			this->label_prompts->Text = L"Prompts";
			// 
			// check_startup
			// 
			this->check_startup->AutoSize = true;
			this->check_startup->BackColor = System::Drawing::Color::FromArgb(static_cast<System::Int32>(static_cast<System::Byte>(20)), static_cast<System::Int32>(static_cast<System::Byte>(20)),
				static_cast<System::Int32>(static_cast<System::Byte>(20)));
			this->check_startup->Font = (gcnew System::Drawing::Font(L"Lucida Sans Unicode", 8.25F, System::Drawing::FontStyle::Regular, System::Drawing::GraphicsUnit::Point,
				static_cast<System::Byte>(0)));
			this->check_startup->Location = System::Drawing::Point(852, 275);
			this->check_startup->Name = L"check_startup";
			this->check_startup->Size = System::Drawing::Size(65, 19);
			this->check_startup->TabIndex = 18;
			this->check_startup->Text = L"Startup";
			this->check_startup->UseVisualStyleBackColor = false;
			this->check_startup->CheckedChanged += gcnew System::EventHandler(this, &gui::check_startup_CheckedChanged);
			// 
			// link_reset
			// 
			this->link_reset->AutoSize = true;
			this->link_reset->BackColor = System::Drawing::Color::FromArgb(static_cast<System::Int32>(static_cast<System::Byte>(20)), static_cast<System::Int32>(static_cast<System::Byte>(20)),
				static_cast<System::Int32>(static_cast<System::Byte>(20)));
			this->link_reset->ForeColor = System::Drawing::SystemColors::ButtonFace;
			this->link_reset->LinkColor = System::Drawing::Color::FromArgb(static_cast<System::Int32>(static_cast<System::Byte>(150)), static_cast<System::Int32>(static_cast<System::Byte>(0)),
				static_cast<System::Int32>(static_cast<System::Byte>(0)));
			this->link_reset->Location = System::Drawing::Point(593, 276);
			this->link_reset->Name = L"link_reset";
			this->link_reset->Size = System::Drawing::Size(35, 13);
			this->link_reset->TabIndex = 20;
			this->link_reset->TabStop = true;
			this->link_reset->Text = L"Reset";
			this->link_reset->TextAlign = System::Drawing::ContentAlignment::MiddleCenter;
			this->link_reset->VisitedLinkColor = System::Drawing::SystemColors::ButtonFace;
			this->link_reset->LinkClicked += gcnew System::Windows::Forms::LinkLabelLinkClickedEventHandler(this, &gui::link_reset_LinkClicked);
			// 
			// text_output
			// 
			this->text_output->BackColor = System::Drawing::SystemColors::InfoText;
			this->text_output->BorderStyle = System::Windows::Forms::BorderStyle::None;
			this->text_output->Cursor = System::Windows::Forms::Cursors::Default;
			this->text_output->Font = (gcnew System::Drawing::Font(L"Cascadia Code", 8.25F, System::Drawing::FontStyle::Regular, System::Drawing::GraphicsUnit::Point,
				static_cast<System::Byte>(0)));
			this->text_output->ForeColor = System::Drawing::Color::FromArgb(static_cast<System::Int32>(static_cast<System::Byte>(170)), static_cast<System::Int32>(static_cast<System::Byte>(0)),
				static_cast<System::Int32>(static_cast<System::Byte>(0)));
			this->text_output->Location = System::Drawing::Point(400, 106);
			this->text_output->Margin = System::Windows::Forms::Padding(5);
			this->text_output->Multiline = true;
			this->text_output->Name = L"text_output";
			this->text_output->ReadOnly = true;
			this->text_output->Size = System::Drawing::Size(0, 193);
			this->text_output->TabIndex = 21;
			this->text_output->KeyPress += gcnew System::Windows::Forms::KeyPressEventHandler(this, &gui::HandleKeyPress);
			// 
			// timer_console
			// 
			this->timer_console->Tick += gcnew System::EventHandler(this, &gui::timer_console_Tick);
			// 
			// label_export
			// 
			this->label_export->BackColor = System::Drawing::Color::FromArgb(static_cast<System::Int32>(static_cast<System::Byte>(35)), static_cast<System::Int32>(static_cast<System::Byte>(35)),
				static_cast<System::Int32>(static_cast<System::Byte>(35)));
			this->label_export->Font = (gcnew System::Drawing::Font(L"Lucida Sans Unicode", 9, System::Drawing::FontStyle::Regular, System::Drawing::GraphicsUnit::Point,
				static_cast<System::Byte>(0)));
			this->label_export->Location = System::Drawing::Point(419, 159);
			this->label_export->Name = L"label_export";
			this->label_export->Size = System::Drawing::Size(99, 16);
			this->label_export->TabIndex = 23;
			this->label_export->Text = L"Export Location";
			this->label_export->TextAlign = System::Drawing::ContentAlignment::MiddleRight;
			// 
			// input_export
			// 
			this->input_export->BackColor = System::Drawing::Color::FromArgb(static_cast<System::Int32>(static_cast<System::Byte>(45)), static_cast<System::Int32>(static_cast<System::Byte>(45)),
				static_cast<System::Int32>(static_cast<System::Byte>(45)));
			this->input_export->BorderStyle = System::Windows::Forms::BorderStyle::None;
			this->input_export->Font = (gcnew System::Drawing::Font(L"Consolas", 9.75F, System::Drawing::FontStyle::Regular, System::Drawing::GraphicsUnit::Point,
				static_cast<System::Byte>(0)));
			this->input_export->ForeColor = System::Drawing::SystemColors::ButtonFace;
			this->input_export->Location = System::Drawing::Point(529, 160);
			this->input_export->Name = L"input_export";
			this->input_export->Size = System::Drawing::Size(190, 16);
			this->input_export->TabIndex = 22;
			this->input_export->TextChanged += gcnew System::EventHandler(this, &gui::input_export_TextChanged);
			// 
			// button_ex
			// 
			this->button_ex->AutoSize = true;
			this->button_ex->BackgroundImage = (cli::safe_cast<System::Drawing::Image^>(resources->GetObject(L"button_ex.BackgroundImage")));
			this->button_ex->ForeColor = System::Drawing::Color::FromArgb(static_cast<System::Int32>(static_cast<System::Byte>(30)), static_cast<System::Int32>(static_cast<System::Byte>(30)),
				static_cast<System::Int32>(static_cast<System::Byte>(30)));
			this->button_ex->Location = System::Drawing::Point(729, 160);
			this->button_ex->Name = L"button_ex";
			this->button_ex->Size = System::Drawing::Size(24, 15);
			this->button_ex->TabIndex = 24;
			this->button_ex->UseVisualStyleBackColor = true;
			this->button_ex->Visible = false;
			this->button_ex->Click += gcnew System::EventHandler(this, &gui::button_ex_Click);
			// 
			// label_success
			// 
			this->label_success->Font = (gcnew System::Drawing::Font(L"Lucida Console", 18, System::Drawing::FontStyle::Regular, System::Drawing::GraphicsUnit::Point,
				static_cast<System::Byte>(0)));
			this->label_success->Location = System::Drawing::Point(911, 169);
			this->label_success->Name = L"label_success";
			this->label_success->Size = System::Drawing::Size(150, 23);
			this->label_success->TabIndex = 25;
			this->label_success->Text = L"[complete]";
			// 
			// link_open
			// 
			this->link_open->AutoSize = true;
			this->link_open->BackColor = System::Drawing::Color::FromArgb(static_cast<System::Int32>(static_cast<System::Byte>(30)), static_cast<System::Int32>(static_cast<System::Byte>(30)),
				static_cast<System::Int32>(static_cast<System::Byte>(30)));
			this->link_open->ForeColor = System::Drawing::SystemColors::ButtonFace;
			this->link_open->LinkColor = System::Drawing::Color::FromArgb(static_cast<System::Int32>(static_cast<System::Byte>(150)), static_cast<System::Int32>(static_cast<System::Byte>(0)),
				static_cast<System::Int32>(static_cast<System::Byte>(0)));
			this->link_open->Location = System::Drawing::Point(974, 219);
			this->link_open->Name = L"link_open";
			this->link_open->Size = System::Drawing::Size(77, 13);
			this->link_open->TabIndex = 26;
			this->link_open->TabStop = true;
			this->link_open->Text = L"Open Location";
			this->link_open->TextAlign = System::Drawing::ContentAlignment::MiddleCenter;
			this->link_open->VisitedLinkColor = System::Drawing::SystemColors::ButtonFace;
			this->link_open->LinkClicked += gcnew System::Windows::Forms::LinkLabelLinkClickedEventHandler(this, &gui::link_open_LinkClicked);
			// 
			// patch_export
			// 
			this->patch_export->AutoSize = true;
			this->patch_export->BackgroundImage = (cli::safe_cast<System::Drawing::Image^>(resources->GetObject(L"patch_export.BackgroundImage")));
			this->patch_export->ForeColor = System::Drawing::Color::FromArgb(static_cast<System::Int32>(static_cast<System::Byte>(30)), static_cast<System::Int32>(static_cast<System::Byte>(30)),
				static_cast<System::Int32>(static_cast<System::Byte>(30)));
			this->patch_export->Location = System::Drawing::Point(1129, 159);
			this->patch_export->Name = L"patch_export";
			this->patch_export->Size = System::Drawing::Size(26, 17);
			this->patch_export->TabIndex = 27;
			this->patch_export->UseVisualStyleBackColor = true;
			// 
			// patch_build
			// 
			this->patch_build->AutoSize = true;
			this->patch_build->BackgroundImage = (cli::safe_cast<System::Drawing::Image^>(resources->GetObject(L"patch_build.BackgroundImage")));
			this->patch_build->ForeColor = System::Drawing::Color::FromArgb(static_cast<System::Int32>(static_cast<System::Byte>(30)), static_cast<System::Int32>(static_cast<System::Byte>(30)),
				static_cast<System::Int32>(static_cast<System::Byte>(30)));
			this->patch_build->Location = System::Drawing::Point(1057, 271);
			this->patch_build->Name = L"patch_build";
			this->patch_build->Size = System::Drawing::Size(77, 25);
			this->patch_build->TabIndex = 28;
			this->patch_build->UseVisualStyleBackColor = true;
			// 
			// label_version
			// 
			this->label_version->BackColor = System::Drawing::Color::FromArgb(static_cast<System::Int32>(static_cast<System::Byte>(36)), static_cast<System::Int32>(static_cast<System::Byte>(36)),
				static_cast<System::Int32>(static_cast<System::Byte>(36)));
			this->label_version->Font = (gcnew System::Drawing::Font(L"Lucida Sans Unicode", 9, System::Drawing::FontStyle::Regular, System::Drawing::GraphicsUnit::Point,
				static_cast<System::Byte>(0)));
			this->label_version->Location = System::Drawing::Point(50, 50);
			this->label_version->Name = L"label_version";
			this->label_version->Size = System::Drawing::Size(92, 17);
			this->label_version->TabIndex = 29;
			this->label_version->Text = L"v1.0.0-beta.3";
			// 
			// button_exit
			// 
			this->button_exit->BackgroundImage = (cli::safe_cast<System::Drawing::Image^>(resources->GetObject(L"button_exit.BackgroundImage")));
			this->button_exit->FlatStyle = System::Windows::Forms::FlatStyle::Flat;
			this->button_exit->Location = System::Drawing::Point(754, 0);
			this->button_exit->Name = L"button_exit";
			this->button_exit->Size = System::Drawing::Size(39, 30);
			this->button_exit->TabIndex = 30;
			this->button_exit->UseVisualStyleBackColor = true;
			this->button_exit->Visible = false;
			this->button_exit->Click += gcnew System::EventHandler(this, &gui::button_exit_Click);
			// 
			// gui
			// 
			this->AutoScaleDimensions = System::Drawing::SizeF(6, 13);
			this->AutoScaleMode = System::Windows::Forms::AutoScaleMode::Font;
			this->BackColor = System::Drawing::Color::FromArgb(static_cast<System::Int32>(static_cast<System::Byte>(30)), static_cast<System::Int32>(static_cast<System::Byte>(30)),
				static_cast<System::Int32>(static_cast<System::Byte>(30)));
			this->BackgroundImage = (cli::safe_cast<System::Drawing::Image^>(resources->GetObject(L"$this.BackgroundImage")));
			this->ClientSize = System::Drawing::Size(793, 325);
			this->Controls->Add(this->button_exit);
			this->Controls->Add(this->label_version);
			this->Controls->Add(this->patch_build);
			this->Controls->Add(this->patch_export);
			this->Controls->Add(this->text_output);
			this->Controls->Add(this->link_open);
			this->Controls->Add(this->label_success);
			this->Controls->Add(this->button_ex);
			this->Controls->Add(this->label_export);
			this->Controls->Add(this->input_export);
			this->Controls->Add(this->link_reset);
			this->Controls->Add(this->check_startup);
			this->Controls->Add(this->label_prompts);
			this->Controls->Add(this->check_shortcut);
			this->Controls->Add(this->link_more);
			this->Controls->Add(this->button_sl);
			this->Controls->Add(this->button_sb);
			this->Controls->Add(this->label2);
			this->Controls->Add(this->header_1);
			this->Controls->Add(this->label_run);
			this->Controls->Add(this->input_run);
			this->Controls->Add(this->check_cleanup);
			this->Controls->Add(this->label_libs);
			this->Controls->Add(this->label_bin);
			this->Controls->Add(this->input_lib);
			this->Controls->Add(this->input_bin);
			this->Controls->Add(this->header_1_back);
			this->Controls->Add(this->radio_installer);
			this->Controls->Add(this->radio_loader);
			this->Controls->Add(this->button_build);
			this->ForeColor = System::Drawing::SystemColors::ButtonFace;
			this->FormBorderStyle = System::Windows::Forms::FormBorderStyle::None;
			this->Name = L"gui";
			this->Text = L"gui";
			this->MouseDown += gcnew System::Windows::Forms::MouseEventHandler(this, &gui::gui_MouseDown);
			this->MouseMove += gcnew System::Windows::Forms::MouseEventHandler(this, &gui::gui_MouseMove);
			this->MouseUp += gcnew System::Windows::Forms::MouseEventHandler(this, &gui::gui_MouseUp);
			this->ResumeLayout(false);
			this->PerformLayout();

		}
#pragma endregion
		private: System::Void ConvertString(System::String^ s, std::string& os)
		{
			/*	Convert system string
				to standard string   */

			using namespace System::Runtime::InteropServices;
			const char* chars =
				(const char*)(Marshal::StringToHGlobalAnsi(s)).ToPointer();
			os = chars;
			Marshal::FreeHGlobal(System::IntPtr((void*)chars));
		}
		private: bool CheckMouseover(vec2 cursorPos, AREA area)
		{
			if (!inputEnabled)
				return false;

			switch (area)
			{
			case BUTTON_SELECT_BIN:
				return (cursorPos.x >= BSB_AREA_L && cursorPos.x <= BSB_AREA_R
					&& cursorPos.y >= BSB_AREA_T && cursorPos.y <= BSB_AREA_B);

			case BUTTON_SELECT_LIB:
				return (cursorPos.x >= BSL_AREA_L && cursorPos.x <= BSL_AREA_R
					&& cursorPos.y >= BSL_AREA_T && cursorPos.y <= BSL_AREA_B);

			case BUTTON_EXPORT:
				return (cursorPos.x >= BEX_AREA_L && cursorPos.x <= BEX_AREA_R
					&& cursorPos.y >= BEX_AREA_T && cursorPos.y <= BEX_AREA_B);

			case BUTTON_BUILD:
				return (cursorPos.x >= BB_AREA_L && cursorPos.x <= BB_AREA_R
					&& cursorPos.y >= BB_AREA_T && cursorPos.y <= BB_AREA_B);

			case BUTTON_EXIT:
				return (cursorPos.x >= BE_AREA_L && cursorPos.x <= BE_AREA_R
					&& cursorPos.y >= BE_AREA_T && cursorPos.y <= BE_AREA_B);
			}
		}
		private: System::Void timer_anim_Tick(System::Object^ sender, System::EventArgs^ e)
		{
			/*	Animation-related
				updates   */

			static int currentFrame{ 0 },
				ticks{ 0 };
			static bool build{ false };

			// Animate header text
			if (++ticks == HEADER_TICK_RATE)
			{
				header_1_back->Text = (currentFrame < NUM_HEADER_FRAMES-1 ? gcnew String(headerFrames[++currentFrame].data()) : gcnew String(headerFrames[currentFrame = 0].data()));
				ticks = 0;
			}

			// Expand console
			if (expandConsole)
			{
				if (text_output->Size.Width < CONSOLE_WIDTH)
				{
					if (text_output->Width + CONSOLE_RESIZE_INCREMENT < CONSOLE_WIDTH)
						text_output->Width += CONSOLE_RESIZE_INCREMENT;

					else
						text_output->Width += CONSOLE_WIDTH - text_output->Width;
				}

				// Begin build
				else if (!build)
				{
					build = true;
					Build();
				}
			}

			// Hide console
			else
			{
				if (text_output->Size.Width > 0)
					text_output->Width -= CONSOLE_RESIZE_INCREMENT;

				else
				{
					build = false;
					timer_console->Stop();
				}
			}
		}
		private: System::Void timer_console_Tick(System::Object^ sender, System::EventArgs^ e)
		{
			/*	Console area-related
				updates   */

			static std::stringstream ss;
			static std::string line;

			// If output buffer from process thread is loaded
			if (loaderPtr->GetBufferLoaded())
			{
				// Offload it into text output area
				Print(loaderPtr->OffloadBuffer());
				loaderPtr->ClearBuffer();
			}

			// Continue build when compiler is done installing
			if (installingCompiler)
			{
				System::Threading::Thread::Sleep(DELAY_OUTPUT_SHORT);

				if (!loaderPtr->Reading())
				{
					installingCompiler = false;

					// Re-enlarge text, reset output delay to longest
					text_output->Font = gcnew System::Drawing::Font(text_output->Font->FontFamily, FONT_SIZE_LARGE);
					loaderPtr->DelayOutput(outputDelay = DELAY_OUTPUT_LONG);

					Print("\n");
					Print("Successfully installed g++.");
					Print("\n");

					// Retry build
					if (Build() != SUCCESS)
					{
						Print("\n");
						Print("Build failed.");
					}
				}
			}

			// Install compiler when choco is done installing
			if (installingChoco)
			{
				System::Threading::Thread::Sleep(DELAY_OUTPUT_SHORT);

				if (!loaderPtr->Reading())
				{
					installingChoco = false;

					Print("\n");
					Print("Successfully installed chocolatey.");
					Print("\n");
					Print("Retrying compiler installation.");
					Print("\n");

					std::string cmd{ CMD_INSTALL_COMPILER };
					loaderPtr->SpawnProcThread(std::move(cmd));
					installingCompiler = true;
				}
			}

			// Waiting for compilation to finish
			if (compiling)
			{
				System::Threading::Thread::Sleep(DELAY_OUTPUT_SHORT);

				if (!loaderPtr->Reading())
				{
					compiling = false;

					// Run clean-up
					loaderPtr->CleanUp();

					Print("\n");
					Print("Operation complete.");

					// Swap input under console with success dialog
					SuccessDialog(true);

					// Sleep for 1.5 seconds, clear and retract console
					System::Threading::Thread::Sleep(1500);
					text_output->Text = "";
					expandConsole = false;
				}
			}
		}
		private: System::Void gui::gui_MouseDown(System::Object^ Sender, System::Windows::Forms::MouseEventArgs^ e)
		{
			// Set mouseDown if left mouse button is down over title bar
			if (e->Y <= TITLE_BAR_HEIGHT && e->X < TITLE_BAR_WIDTH)
			{
				cursorDownPos = Cursor->Position;
				mouseDown = true;
			}
		}
		private: System::Void gui::gui_MouseUp(System::Object^ Sender, System::Windows::Forms::MouseEventArgs^ e)
		{
			mouseDown = false;
		}
		private: System::Void gui::gui_MouseMove(System::Object^ Sender, System::Windows::Forms::MouseEventArgs^ e)
		{
			// If mouse button down over title bar, move window with cursor
			if (mouseDown)
			{	
				if (Cursor->Position != cursorDownPos)
				{
					cursorDelta = Point(cursorDownPos.X - Cursor->Position.X, cursorDownPos.Y - Cursor->Position.Y);
					Location = System::Drawing::Point(Location.X - cursorDelta.X, Location.Y - cursorDelta.Y);
					cursorDownPos = Cursor->Position;
				}
			}

			// Cycle through button coords, toggle highlight overlay button visibility
			for (unsigned int i = BUTTON_SELECT_BIN; i < NUM_BUTTONS; ++i)
			{
				switch (i)
				{
				case BUTTON_SELECT_BIN:
					buttonPtr = button_sb;
					break;
				case BUTTON_SELECT_LIB:
					buttonPtr = button_sl;
					break;
				case BUTTON_EXPORT:
					buttonPtr = button_ex;
					break;
				case BUTTON_BUILD:
					buttonPtr = button_build;
					break;
				case BUTTON_EXIT:
					buttonPtr = button_exit;
				}

				if (CheckMouseover(vec2(e->X, e->Y), AREA(i)))
					buttonPtr->Visible = true;

				else if (buttonPtr->Visible)
					buttonPtr->Visible = false;
			}
		}
		private: const char* GetPath(AREA button)
		{
			OpenFileDialog^ openFileDialog1 = gcnew OpenFileDialog;
			openFileDialog1->InitialDirectory = gcnew String(getenv("USERPROFILE"));
			openFileDialog1->FilterIndex = 2;
			openFileDialog1->RestoreDirectory = true;

			FolderBrowserDialog^ folderBrowserDialog = gcnew FolderBrowserDialog;

			static std::string str;
			const char* result{ "0" };

			if (button == BUTTON_EXPORT)
			{
				folderBrowserDialog->Description = "Select the destination folder for the new executable.";
				if (folderBrowserDialog->ShowDialog() == System::Windows::Forms::DialogResult::OK)
				{
					ConvertString(folderBrowserDialog->SelectedPath, str);
					result = str.c_str();
				}
			}

			else
			{
				openFileDialog1->Filter = (button == BUTTON_SELECT_BIN ? "Exe Files (.exe)|*.exe" : "DLL Files (.dll)|*.dll");
				if (openFileDialog1->ShowDialog() == System::Windows::Forms::DialogResult::OK)
				{
					ConvertString(openFileDialog1->FileName, str);
					result = str.c_str();
				}
			}

			return result;
		}
		private: System::Void button_sb_Click(System::Object^ sender, System::EventArgs^ e)
		{
			// Attempt to get path, return if user cancels
			if ((binPath = GetPath(BUTTON_SELECT_BIN)) == "0")
				return;

			// Set text, set input cursor to end
			input_bin->Text = gcnew String(binPath);
			input_bin->Select(input_bin->Text->Length, 0);

			// Hide bin select button overlay
			button_sb->Visible = false;

			// Strip path and file extension, pass to back end as app name
			static std::string buffer;
			buffer = binPath;
			size_t pos = buffer.find_last_of("\\");
			buffer.erase(0, pos + 1);
			buffer.erase(buffer.length() - 4, buffer.length());
			appName = buffer.c_str();
			loaderPtr->SetAppName(appName);

			// Update default install path if unchanged, if installer selected
			if (loaderPtr->CheckInstaller())
			{
				String^ defaultPath = gcnew String(DEFAULT_TEXT_INSTALL);
				if (input_run->Text == defaultPath)
					input_run->Text += gcnew String(appName);
			}
		}
		private: System::Void button_sl_Click(System::Object^ sender, System::EventArgs^ e)
		{
			// Store full path, add only filename to input_lib text
			std::string path = GetPath(BUTTON_SELECT_LIB);

			// Return if user cancels
			if (path == "0")
				return;

			if (!libPaths.Contains(gcnew String(path.c_str())))
				libPaths.Add(gcnew String(path.c_str()));
			
			loaderPtr->SetPath(Loader::PATH_LIB, path);
			size_t pos = path.find_last_of("\\");
			path.erase(0, pos + 1);

			if (!input_lib->Text->Contains(gcnew String(path.c_str())))
			{
				input_lib->AppendText(gcnew String(path.c_str()));
				input_lib->AppendText(System::Environment::NewLine);
			}

			button_sl->Visible = false;
		}
		private: System::Void button_ex_Click(System::Object^ sender, System::EventArgs^ e)
		{
			// Store full path, set input cursor to end
			exportPath = gcnew String(GetPath(BUTTON_EXPORT));
			input_export->Text = exportPath;
			input_export->Select(input_export->Text->Length, 0);
			button_ex->Visible = false;
		}
		private: System::Void button_build_Click(System::Object^ sender, System::EventArgs^ e)
		{
			// Disable graphical input
			ToggleInput(false);

			/* Reveal text output area, call Build() from
				timer_anim_tick() when area is fully expanded */

			expandConsole = true;
			timer_console->Start();
			button_build->Visible = false;
		}
		private: System::Void radio_loader_CheckedChanged(System::Object^ sender, System::EventArgs^ e)
		{
			// Loader selected
			if (radio_loader->Checked == true)
			{
				// Specify loader
				loaderPtr->SelectInstaller(false);

				// Displace installer input
				label_prompts->Location = System::Drawing::Point(XPOS_PROMPTS + XPOS_OFFSET, label_prompts->Location.Y);
				check_shortcut->Location = System::Drawing::Point(XPOS_PROMPTS + XPOS_OFFSET, check_shortcut->Location.Y);
				check_startup->Location = System::Drawing::Point(XPOS_PROMPTS + XPOS_OFFSET, check_startup->Location.Y);

				// Restore loader input
				check_cleanup->Location = System::Drawing::Point(XPOS_CHECK_CLEANUP, check_cleanup->Location.Y);

				// Change label
				label_run->Text = "Run Location";

				// Change suggested path
				input_run->Text = "C:\\temp";
			}

			// Installer selected
			else
			{
				// Specify installer
				loaderPtr->SelectInstaller(true);

				// Displace loader input
				check_cleanup->Location = System::Drawing::Point(XPOS_CHECK_CLEANUP + XPOS_OFFSET, check_cleanup->Location.Y);

				// Restore installer input
				label_prompts->Location = System::Drawing::Point(XPOS_PROMPTS, label_prompts->Location.Y);
				check_shortcut->Location = System::Drawing::Point(XPOS_PROMPTS, check_shortcut->Location.Y);
				check_startup->Location = System::Drawing::Point(XPOS_PROMPTS, check_startup->Location.Y);
				check_startup->Size.Width += 1;

				// Change label
				label_run->Text = "Install Location";

				// Change suggested path if unchanged
				std::string defaultPath{ DEFAULT_TEXT_INSTALL };
				defaultPath.append(appName);
				input_run->Text = gcnew String(defaultPath.c_str());
			}
		}
		private: System::Void Reset()
		{
			radio_loader->Checked = true;
			libPaths.Clear();
			appName = "";
			input_bin->Text = "";
			input_lib->Text = "";
			input_run->Text = gcnew String(DEFAULT_TEXT_RUN);
			check_cleanup->Checked = false;
			check_shortcut->Checked = false;
			check_startup->Checked = false;
			SuccessDialog(false);
			ToggleInput(true);
		}
		private: System::Void link_reset_LinkClicked(System::Object^ sender, System::Windows::Forms::LinkLabelLinkClickedEventArgs^ e)
		{
			Reset();
		}
		private: System::Void input_bin_TextChanged(System::Object^ sender, System::EventArgs^ e)
		{
			std::string path;
			ConvertString(input_bin->Text, path);
			loaderPtr->SetPath(Loader::PATH_BIN, path);
		}
		private: System::Void input_export_TextChanged(System::Object^ sender, System::EventArgs^ e)
		{
			std::string path;
			ConvertString(input_export->Text, path);
			loaderPtr->SetPath(Loader::PATH_EXPORT, path);
		}
		private: System::Void input_run_TextChanged(System::Object^ sender, System::EventArgs^ e)
		{
			std::string path;
			ConvertString(input_run->Text, path);

			// Set run path or installer path
			if (loaderPtr->CheckInstaller())
				loaderPtr->SetPath(Loader::PATH_INSTALLER, path);

			else
				loaderPtr->SetPath(Loader::PATH_RUN, path);
		}
		private: void Print(const std::string& arg)
		{
			System::String^ str = gcnew String(arg.c_str());
			text_output->AppendText(gcnew String(str)
				+ System::Environment::NewLine);

			// Pause thread between lines printed
			System::Threading::Thread::Sleep(outputDelay);
		}
		private: unsigned int Build()
		{
			text_output->Clear();

			// Validate file paths
			Print("Validating file paths.");

			unsigned int pathResult = loaderPtr->ValidatePath(Loader::PATH_ALL);

			if (pathResult != SUCCESS)
			{
				switch (pathResult)
				{
				case Loader::PATH_BIN:
					Print("Invalid executable path specified.");
					break;
				case Loader::PATH_LIB:
					Print("Invalid libary path specified.");
					break;
				case Loader::PATH_RUN:
					Print("Invalid run path specified.");
				}

				// Sleep for three seconds, clear and retract console
				System::Threading::Thread::Sleep(3000);
				text_output->Text = "";
				expandConsole = false;
				ToggleInput(true);

				return FAILURE_CONTINUE;
			}

			// Check for compiler, prompt user whether to auto install
			if (!loaderPtr->CompilerInstalled())
			{
				Print("Could not detect compiler.");
				text_output->AppendText("Auto install GNU C++ Compiler (g++)? (Y/N): ");
				prompting[INSTALL_COMPILER] = true;
				this->ActiveControl = text_output;
				
				return FAILURE_CONTINUE;
			}

			else
				Print("Compiler detected.");

			// Hex dump files, build header and implementation files
			Print("Building header file.");

			if (loaderPtr->BuildHeader() != SUCCESS)
			{
				Print(loaderPtr->GetError());
				return FAILURE_CONTINUE;
			}

			Print("Building implementation file.");

			if (loaderPtr->BuildImplFile() != SUCCESS)
			{
				Print(loaderPtr->GetError());
				return FAILURE_CONTINUE;
			}

			// Compile new executable
			Print((loaderPtr->CheckInstaller() ? "Compiling installer." : "Compiling loader."));

			if (loaderPtr->Compile() != SUCCESS)
			{
				Print(loaderPtr->GetError());
				return FAILURE_CONTINUE;
			}

			compiling = true;

			return SUCCESS;
		}
		private: System::Void HandleKeyPress(System::Object^ sender, System::Windows::Forms::KeyPressEventArgs^ e)
		{
			// 'Auto install compiler' prompt
			if (prompting[INSTALL_COMPILER])
			{
				prompting[INSTALL_COMPILER] = false;

				// 'Y' pressed
				if (e->KeyChar == 'y' || e->KeyChar == 'Y')
				{
					Print("Y");

					// If chocolatey installed
					if (loaderPtr->ChocoInstalled())
					{
						Print("Chocolatey is installed.");

						// Install compiler
						std::string compilerCmd{ CMD_INSTALL_COMPILER };
						if (loaderPtr->SpawnProcThread(std::move(compilerCmd)) != SUCCESS)
							Print(loaderPtr->GetError().c_str());

						installingCompiler = true;

						// Shrink text, set output delay to shortest
						text_output->Font = gcnew System::Drawing::Font(text_output->Font->FontFamily, FONT_SIZE_SMALL);
						loaderPtr->DelayOutput(outputDelay = DELAY_OUTPUT_SHORT);
					}

					// If chocolatey not installed
					else
					{
						// Prompt user whether to auto install
						Print("Could not detect Chocolatey.");
						text_output->AppendText("Auto install Chocolatey? (Y/N): ");
						prompting[INSTALL_CHOCO] = true;
					}
				}

				// 'N' pressed
				else if (e->KeyChar == 'n' || e->KeyChar == 'N')
				{
					// Re-enlarge font, reset output delay
					text_output->Font = gcnew System::Drawing::Font(text_output->Font->FontFamily, FONT_SIZE_LARGE);
					loaderPtr->DelayOutput(outputDelay = DELAY_OUTPUT_LONG);

					Print("N");
					Print("Aborting. Please manually install MinGW.");

					// Sleep for two seconds, clear and retract console
					System::Threading::Thread::Sleep(2000);
					text_output->Text = "";
					expandConsole = false;
					ToggleInput(true);
				}

				return;
			}

			// 'Auto install choco' prompt
			if (prompting[INSTALL_CHOCO])
			{
				prompting[INSTALL_CHOCO] = false;

				// 'Y' pressed
				if (e->KeyChar == 'y' || e->KeyChar == 'Y')
				{
					Print("Y");

					// Install chocolatey
					std::string chocoCmd{ CMD_INSTALL_CHOCO };
					if (loaderPtr->SpawnProcThread(std::move(chocoCmd)) != SUCCESS)
						Print(loaderPtr->GetError().c_str());

					installingChoco = true;

					// Shrink text, set output delay to shortest
					text_output->Font = gcnew System::Drawing::Font(text_output->Font->FontFamily, FONT_SIZE_SMALL);
					loaderPtr->DelayOutput(outputDelay = DELAY_OUTPUT_SHORT);
				}

				// 'N' pressed
				else if (e->KeyChar == 'n' || e->KeyChar == 'N')
				{
					// Re-enlarge text, reset output delay
					text_output->Font = gcnew System::Drawing::Font(text_output->Font->FontFamily, FONT_SIZE_LARGE);
					loaderPtr->DelayOutput(outputDelay = DELAY_OUTPUT_LONG);

					Print("N");
					Print("Aborting. Please manually install Chocolatey or MinGW.");

					// Sleep for two seconds, clear and retract console
					System::Threading::Thread::Sleep(2000);
					text_output->Text = "";
					expandConsole = false;
					ToggleInput(true);
				}
			}
		}
		private: void ToggleInput(bool enabled)
		{
			inputEnabled = enabled;
			input_bin->Enabled = enabled;
			input_lib->Enabled = enabled;
		}
		private: void SuccessDialog(bool shown)
		{
			// Hide or reveal the elements on right side of window
			radio_loader->Visible = !shown;
			radio_installer->Visible = !shown;
			label_export->Visible = !shown;
			label_run->Visible = !shown;
			input_export->Visible = !shown;
			input_run->Visible = !shown;
			check_cleanup->Visible = !shown;
			label_prompts->Visible = !shown;
			check_shortcut->Visible = !shown;
			check_startup->Visible = !shown;

			// Snap success message, links and patches
			int offset = (shown ? XPOS_OFFSET : XPOS_OFFSET * -1),
				color = (shown ? COLOR_RESET_LINK_1 : COLOR_RESET_LINK_0);

			label_success->Location = System::Drawing::Point(label_success->Location.X - offset, label_success->Location.Y);
			link_open->Location = System::Drawing::Point(link_open->Location.X - offset, link_open->Location.Y);
			link_reset->Location = System::Drawing::Point((shown ? XPOS_RESET_LINK_1 : XPOS_RESET_LINK_0), (shown ? YPOS_RESET_LINK_1 : YPOS_RESET_LINK_0));
			link_reset->BackColor = System::Drawing::Color::FromArgb(static_cast<System::Int32>(static_cast<System::Byte>(color)), static_cast<System::Int32>(static_cast<System::Byte>(color)),
				static_cast<System::Int32>(static_cast<System::Byte>(color)));
			patch_export->Location = System::Drawing::Point(patch_export->Location.X - offset, patch_export->Location.Y);
			patch_build->Location = System::Drawing::Point(patch_build->Location.X - offset, patch_build->Location.Y);
		}
		private: System::Void link_open_LinkClicked(System::Object^ sender, System::Windows::Forms::LinkLabelLinkClickedEventArgs^ e)
		{
			System::Diagnostics::Process::Start("C:\\Windows\\explorer.exe", gcnew String(exportPath));
		}
		private: System::Void check_cleanup_CheckedChanged(System::Object^ sender, System::EventArgs^ e)
		{
			loaderPtr->SetOption(OPTION_CLEANUP, check_cleanup->Checked);
		}
		private: System::Void check_shortcut_CheckedChanged(System::Object^ sender, System::EventArgs^ e)
		{
			loaderPtr->SetOption(OPTION_SHORTCUT, check_shortcut->Checked);
		}
		private: System::Void check_startup_CheckedChanged(System::Object^ sender, System::EventArgs^ e)
		{
			loaderPtr->SetOption(OPTION_STARTUP, check_startup->Checked);
		}
		private: System::Void link_more_LinkClicked(System::Object^ sender, System::Windows::Forms::LinkLabelLinkClickedEventArgs^ e)
		{
			// Return if info form is already open
			FormCollection^ forms = Application::OpenForms;
			for each (System::Windows::Forms::Form^ form in forms)
			{
				if (form->Name == "info")
				{
					form->Focus();
					return;
				}
			}

			// Open info form
			info^ infoForm = gcnew info();
			infoForm->Show();
		}
		private: System::Void button_exit_Click(System::Object^ sender, System::EventArgs^ e)
		{
			Application::Exit();
		}
};
}

